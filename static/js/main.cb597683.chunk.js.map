{"version":3,"sources":["Components/CountDownTimer/CountDownTimer.tsx","Components/CountDownTimer/Utils/CountDownTimerUtils.tsx","App.tsx","index.tsx"],"names":["defaultRemainingTime","seconds","minutes","hours","days","CountDownTimer","countDownTimeStampMs","useState","remainingTime","setRemainingTime","updateRemainingTime","countDown","timestampMs","padWithZeros","num","minLength","numberString","toString","length","repeat","timestampDayjs","dayjs","nowDayjs","diff","getRemainingSeconds","getRemainingMinutes","getRemainingHours","getRemainingDays","getReamainingTimeUntilMsTimeStamp","useEffect","intervalId","setInterval","clearInterval","className","App","Date","now","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAKMA,EAAuB,CAC3BC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,KAAM,MAwCOC,EAjCyB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,qBACzC,EAA0CC,mBAASP,GAAnD,mBAAOQ,EAAP,KAAsBC,EAAtB,KAEA,SAASC,EAAoBC,GAC3BF,EClBG,SAA2CG,GAChD,SAASC,EAAaC,EAAaC,GACjC,IAAMC,EAAeF,EAAIG,WAEzB,OAAID,EAAaE,QAAUH,EAClBC,EAGF,IAAIG,OAAOJ,EAAYC,EAAaE,QAAUF,EA2BvD,IAAMI,EAAwBC,IAAMT,GAC9BU,EAAkBD,MAExB,MAAO,CACLpB,QA5BF,SAA6BqB,EAAiBF,GAG5C,OAAOP,EAFSO,EAAeG,KAAKD,EAAU,WAAa,GAE9B,GAyBpBE,CAAoBF,EAAUF,GACvClB,QAvBF,SAA6BoB,EAAiBF,GAG5C,OAAOP,EAFSO,EAAeG,KAAKD,EAAU,WAAa,GAE9B,GAoBpBG,CAAoBH,EAAUF,GACvCjB,MAlBF,SAA2BmB,EAAiBF,GAG1C,OAAOP,EAFOO,EAAeG,KAAKD,EAAU,SAAW,GAE5B,GAepBI,CAAkBJ,EAAUF,GACnChB,KAbF,SAA0BkB,EAAiBF,GAGzC,OAFaA,EAAeG,KAAKD,EAAU,QAE/BL,WAUNU,CAAiBL,EAAUF,IDxBhBQ,CAAkCjB,IAGrDkB,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BrB,EAAoBJ,KACnB,KAEH,OAAO,kBAAM0B,wBAAcF,MAC1B,CAACxB,IAEJ,IACEF,EACEI,EADFJ,KAAMD,EACJK,EADIL,MAAOD,EACXM,EADWN,QAASD,EACpBO,EADoBP,QAGxB,OACE,sBAAKgC,UAAU,QAAf,UACE,+BAAO7B,IACP,wCACA,+BAAOD,IACP,yCACA,+BAAOD,IACP,2CACA,+BAAOD,IACP,+CExCOiC,EAAgB,WAC3B,OACE,qBAAKD,UAAU,MAAf,SACE,cAAC,EAAD,CAAgB3B,qBAAuB6B,KAAKC,WCFlDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cb597683.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { clearInterval } from 'timers';\nimport './CountDownTimer.scss';\nimport { getReamainingTimeUntilMsTimeStamp } from './Utils/CountDownTimerUtils';\n\nconst defaultRemainingTime = {\n  seconds: '00',\n  minutes: '00',\n  hours: '00',\n  days: '00',\n};\n\ntype Props = {\n  countDownTimeStampMs: number;\n};\n\nconst CountDownTimer: React.FC<Props> = ({ countDownTimeStampMs }) => {\n  const [remainingTime, setRemainingTime] = useState(defaultRemainingTime);\n\n  function updateRemainingTime(countDown: number) {\n    setRemainingTime(getReamainingTimeUntilMsTimeStamp(countDown));\n  }\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateRemainingTime(countDownTimeStampMs);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [countDownTimeStampMs]);\n\n  const {\n    days, hours, minutes, seconds,\n  } = remainingTime;\n\n  return (\n    <div className=\"timer\">\n      <span>{days}</span>\n      <span>days</span>\n      <span>{hours}</span>\n      <span>hours</span>\n      <span>{minutes}</span>\n      <span>minutes</span>\n      <span>{seconds}</span>\n      <span>seconds</span>\n    </div>\n  );\n};\n\nexport default CountDownTimer;\n","import dayjs, { Dayjs } from 'dayjs';\n\nexport function getReamainingTimeUntilMsTimeStamp(timestampMs: number) {\n  function padWithZeros(num: number, minLength: number) {\n    const numberString = num.toString();\n\n    if (numberString.length >= minLength) {\n      return numberString;\n    }\n\n    return '0'.repeat(minLength - numberString.length) + numberString;\n  }\n\n  function getRemainingSeconds(nowDayjs: Dayjs, timestampDayjs: Dayjs) {\n    const seconds = timestampDayjs.diff(nowDayjs, 'seconds') % 60;\n\n    return padWithZeros(seconds, 2);\n  }\n\n  function getRemainingMinutes(nowDayjs: Dayjs, timestampDayjs: Dayjs) {\n    const minutes = timestampDayjs.diff(nowDayjs, 'minutes') % 60;\n\n    return padWithZeros(minutes, 2);\n  }\n\n  function getRemainingHours(nowDayjs: Dayjs, timestampDayjs: Dayjs) {\n    const hours = timestampDayjs.diff(nowDayjs, 'hours') % 24;\n\n    return padWithZeros(hours, 2);\n  }\n\n  function getRemainingDays(nowDayjs: Dayjs, timestampDayjs: Dayjs) {\n    const days = timestampDayjs.diff(nowDayjs, 'days');\n\n    return days.toString();\n  }\n\n  const timestampDayjs: Dayjs = dayjs(timestampMs);\n  const nowDayjs: Dayjs = dayjs();\n\n  return {\n    seconds: getRemainingSeconds(nowDayjs, timestampDayjs),\n    minutes: getRemainingMinutes(nowDayjs, timestampDayjs),\n    hours: getRemainingHours(nowDayjs, timestampDayjs),\n    days: getRemainingDays(nowDayjs, timestampDayjs),\n  };\n}\n","import React from 'react';\nimport './App.scss';\nimport CountDownTimer from './Components/CountDownTimer/CountDownTimer';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CountDownTimer countDownTimeStampMs={(Date.now())} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}